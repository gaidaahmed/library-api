# coding: utf-8

"""
    Library API Spec

    This is an api for a library project that will be used in our SLO course.  # noqa: E501

    OpenAPI spec version: v0.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BookApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_book(self, book, **kwargs):  # noqa: E501
        """create_book  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_book(book, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateBookRequest book: (required)
        :return: CreateBookResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_book_with_http_info(book, **kwargs)  # noqa: E501
        else:
            (data) = self.create_book_with_http_info(book, **kwargs)  # noqa: E501
            return data

    def create_book_with_http_info(self, book, **kwargs):  # noqa: E501
        """create_book  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_book_with_http_info(book, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateBookRequest book: (required)
        :return: CreateBookResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_book" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book' is set
        if self.api_client.client_side_validation and ('book' not in params or
                                                       params['book'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `book` when calling `create_book`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'book' in params:
            body_params = params['book']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/book', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateBookResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_book(self, book_id, **kwargs):  # noqa: E501
        """delete_book  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_book(book_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str book_id: (required)
        :return: DeleteBookResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_book_with_http_info(book_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_book_with_http_info(book_id, **kwargs)  # noqa: E501
            return data

    def delete_book_with_http_info(self, book_id, **kwargs):  # noqa: E501
        """delete_book  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_book_with_http_info(book_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str book_id: (required)
        :return: DeleteBookResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_book" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if self.api_client.client_side_validation and ('book_id' not in params or
                                                       params['book_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `book_id` when calling `delete_book`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['bookID'] = params['book_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/book/{bookID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteBookResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_book(self, book_id, **kwargs):  # noqa: E501
        """get_book  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_book(book_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str book_id: (required)
        :return: Book
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_book_with_http_info(book_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_book_with_http_info(book_id, **kwargs)  # noqa: E501
            return data

    def get_book_with_http_info(self, book_id, **kwargs):  # noqa: E501
        """get_book  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_book_with_http_info(book_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str book_id: (required)
        :return: Book
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_book" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if self.api_client.client_side_validation and ('book_id' not in params or
                                                       params['book_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `book_id` when calling `get_book`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['bookID'] = params['book_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/book/{bookID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Book',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_books(self, **kwargs):  # noqa: E501
        """list_books  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_books(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ListBooksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_books_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_books_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_books_with_http_info(self, **kwargs):  # noqa: E501
        """list_books  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_books_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ListBooksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_books" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/book', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListBooksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_book(self, book_id, book, **kwargs):  # noqa: E501
        """update_book  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_book(book_id, book, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str book_id: (required)
        :param CreateBookRequest book: (required)
        :return: Book
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_book_with_http_info(book_id, book, **kwargs)  # noqa: E501
        else:
            (data) = self.update_book_with_http_info(book_id, book, **kwargs)  # noqa: E501
            return data

    def update_book_with_http_info(self, book_id, book, **kwargs):  # noqa: E501
        """update_book  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_book_with_http_info(book_id, book, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str book_id: (required)
        :param CreateBookRequest book: (required)
        :return: Book
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id', 'book']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_book" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if self.api_client.client_side_validation and ('book_id' not in params or
                                                       params['book_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `book_id` when calling `update_book`")  # noqa: E501
        # verify the required parameter 'book' is set
        if self.api_client.client_side_validation and ('book' not in params or
                                                       params['book'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `book` when calling `update_book`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['bookID'] = params['book_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'book' in params:
            body_params = params['book']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/book/{bookID}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Book',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
