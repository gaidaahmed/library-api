# coding: utf-8

"""
    Library API Spec

    This is an api for a library project that will be used in our SLO course.  # noqa: E501

    OpenAPI spec version: v0.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Book(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'book_id': 'str',
        'book_description': 'str',
        'book_title': 'str',
        'book_author': 'str'
    }

    attribute_map = {
        'book_id': 'bookID',
        'book_description': 'bookDescription',
        'book_title': 'bookTitle',
        'book_author': 'bookAuthor'
    }

    def __init__(self, book_id=None, book_description=None, book_title=None, book_author=None, _configuration=None):  # noqa: E501
        """Book - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._book_id = None
        self._book_description = None
        self._book_title = None
        self._book_author = None
        self.discriminator = None

        if book_id is not None:
            self.book_id = book_id
        if book_description is not None:
            self.book_description = book_description
        if book_title is not None:
            self.book_title = book_title
        if book_author is not None:
            self.book_author = book_author

    @property
    def book_id(self):
        """Gets the book_id of this Book.  # noqa: E501


        :return: The book_id of this Book.  # noqa: E501
        :rtype: str
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id):
        """Sets the book_id of this Book.


        :param book_id: The book_id of this Book.  # noqa: E501
        :type: str
        """

        self._book_id = book_id

    @property
    def book_description(self):
        """Gets the book_description of this Book.  # noqa: E501


        :return: The book_description of this Book.  # noqa: E501
        :rtype: str
        """
        return self._book_description

    @book_description.setter
    def book_description(self, book_description):
        """Sets the book_description of this Book.


        :param book_description: The book_description of this Book.  # noqa: E501
        :type: str
        """

        self._book_description = book_description

    @property
    def book_title(self):
        """Gets the book_title of this Book.  # noqa: E501


        :return: The book_title of this Book.  # noqa: E501
        :rtype: str
        """
        return self._book_title

    @book_title.setter
    def book_title(self, book_title):
        """Sets the book_title of this Book.


        :param book_title: The book_title of this Book.  # noqa: E501
        :type: str
        """

        self._book_title = book_title

    @property
    def book_author(self):
        """Gets the book_author of this Book.  # noqa: E501


        :return: The book_author of this Book.  # noqa: E501
        :rtype: str
        """
        return self._book_author

    @book_author.setter
    def book_author(self, book_author):
        """Sets the book_author of this Book.


        :param book_author: The book_author of this Book.  # noqa: E501
        :type: str
        """

        self._book_author = book_author

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Book, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Book):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Book):
            return True

        return self.to_dict() != other.to_dict()
